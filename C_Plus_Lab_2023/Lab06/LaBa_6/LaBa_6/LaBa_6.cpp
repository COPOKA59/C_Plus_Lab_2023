#define _CRT_SECURE_NO_WARNINGS
#include <conio.h> // Подключаем заголовочный файл с описанием функции getch
#include <stdio.h> // Подключаем заголовочный файл с описанием функции printf
#include <locale.h> // Подключаем заголовочный файл с описанием функции setlocale
#include <iostream>
#include <cstdlib>
#include <string.h> // ?
// Константы
#define SConst = "AAacscakinvb axcac"
/* Лабораторная работа № 6, Вариант 13;
   Макарова Полина, 2 курс, гр. ПМИ-2 */

   /* Вариант 13 >
   *    Написать программу анализа и обработки текстов. Программа должна
        позволять выбирать нужный текст для анализа: строкой-константой прямо в тексте
        программы, читать текст из файла, вводить текст с клавиатуры. Текстовый файл
        подготовить в каком-либо текстовом редакторе. Добавить в программу вывод
        результатов в другой тестовый файл.
        Для получения максимального балла нужно выполнить следующие требования:
        - Память под переделанный текст или массив слов (предложений) должна
        выделяться динамически.
        - Алгоритмы анализа должны быть реализованы с помощью функций.
        - Программа должна содержать меню и цикл для возможного повторного
        ввода и анализа текста.
        - Программа должна позволять вводить имя файла с клавиатуры.

        13. Вывести гистограмму встречаемости букв английского алфавита
            в тексте. Строчные и прописные буквы не разделять.
   */

// Метод чтение текста файла
char* Reading_a_file(FILE* fp)
{
    char *str;
    long len, n;
    fseek(fp, 0L, SEEK_END);  // Переходим в конец файла
    len = ftell(fp);  // Читаем позицию в файле
    printf("Len = %d - длина файла\n\n", len);  // Это и будет длина файла
    fseek(fp, 0L, SEEK_SET);  // Переходим снова в начало файла

    str = new char[len + 1];  // Выделяем память под массив символов
    n = fread(str, sizeof(char), len, fp);  // Читаем весь текст
                                            // целиком из файла в массив str
    str[n] = 0;  // Ставим конец строки
    return str;

    //while (fgets(str, len, fp) != NULL) // читаем из файла
    //    printf("%s", str);
}

// Метод вывода результатов во второй текстовый файл
void Writing_to_a_file(char Alf[], int AlfScore[])
{
    // Объявляется указатель на файл
    FILE* fp;
    // Объявляется имя файла по умолчанию
    char name[] = "output.txt";
    fp = fopen(name, "r"); // Открываем для чтения
    if (fp == NULL) {
        printf("\nФайл не открыт\n"); // Если не открылся,
    }
    // Строка букв английсткого алфавита
    //char Alf[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    // Массив для подсчёта колличества букв из алфавита в тексте
    //int AlfScore[26];

    for (int i = 0; i < 26; i++){
        fprintf(fp, "%s = %d\n", Alf[i], AlfScore[i]); // Запись в файл
    }
    fclose(fp);      // закрываем файл 
}

// Метод для вызова файла, введённого с клавиатуры
void Changing_the_extension()
{
    // Изменение названия файла на расширение .txt
    char s[80];
    char* p; // для указателя на найденный символ ‘.’
    printf("\nВведите имя файла ");
    gets_s(s);
    p = strrchr(s, '.');
    if (p) // если нашли точку, указатель указывает на нее
        strcpy(p, ".txt"); // вставляем в это место строку “.txt”
    else // Если не нашли точку,
        strcat(s, ".txt"); // добавляем в конец строки s “.txt”
    printf(" % s\n", s);
}

// Метод повышения регистра в строке
char* Raising_the_register(char* str) {
    // Приведение к верхнему регистру
    //char str[] = "Abc Def";
    char* strupr(str);
    printf("%s\n", str);
    return str;
}

// Метод ввода строки с клавиатуры, доработать?
void Keyboard_string() {
    char str1[31];
    printf("Введите строку"); // не более 30 символов
    gets_s(str1, 30);
}

// Метод для подстчёта гистограммы
void Histogram_score()
{

}

// Метод вывода результатов на экран
void Show()
{

}


int main()
{
    setlocale(LC_ALL, "Russian"); // Смена кодировки
    std::system("chcp 1251");
    printf(" |   Макарова Полина, 2 курс, гр. ПМИ-2   |\n");
    printf(" |   Лабораторная работа № 6, Вариант 13  |\n\n");

    char key;
    // Строка букв английсткого алфавита
    char Alf[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    // Массив для подсчёта колличества букв из алфавита в тексте
    int AlfScore[26];

    // Цикл для повторного ввода и анализа текста  
    do // Цикл для организации повторных вычислений
    {
        // Меню с выбором вводимого текста:
            // Строкой - константой прямо в тексте программы
            // Читать текст из файла
            // Вводить текст с клавиатуры


        // Объявляется указатель на файл
        FILE* fp;
        // Объявляется имя файла по умолчанию
        char name[] = "input.txt";

        fp = fopen(name, "r"); // Открываем для чтения
        if (fp == NULL) {
            printf("\nФайл не открыт\n"); // Если не открылся,
            return 1;                     // выходим
        }

        char* str;
        // Метод чтение текста файла
        str = Reading_a_file(fp);
        printf("%s\n\n", str);
        //// Изменение регистра не работает
        //Raising_the_register(str);
        //char* _struprs(str); // ?
        //printf("%s\n", str);
        






        // Метод обработки файла в массив

        //// Создание динамического массива строк
        //char** DStr;
        //int N = 20; // Задаем кол-во строк
        //DStr = new char* [N]; // Создаем массив указателей на строки
        //int len1 = 80; // Задаем размер строки
        //for (int i = 0; i < N; i++)
        //    DStr[i] = new char[len1]; // Выделяем память под i-тую строку


        // Поиск символов в строке
        //char str1[] = "Это первая строка";  
        //char str2[] = "А это вторая строка";
        //char* p;

        //p = strchr(str1, 'о');  // Ищем первую букву о в строке str1  
        //if (p != NULL)   
        //{   printf("Первая буква о: индекс %d\n", p - str1);
        //p = strrchr(str1, 'о'); // Последнюю букву о в строке str1   
        //printf("Последняя буква о: индекс %d\n", p - str1);
        //}  
        //p = strstr(str2, "это"); // Ищем подстроку “это” в строке str2  
        //if ( p != NULL )    
        //    printf("Нашли это в %s", str2);  
        //else  
        //    printf("\nНет слова это в %s", str2);


        //int IsVowel(char c) // Является ли символ гласной буквой
        //{
        //    char* str = “aAeEyYuUiIoOjJаАуУеЕыЫоОэЭяЯиИюЮ"; // гласные
        //        while (*str) // Сравниваем символ с
        //            return 0; // Не совпадает ни с одной гласной буквой
        //}


        // Закрываем файл
        fclose(fp);
        printf("\n\nФайл закрыт !\n");
        // Повтор ввода данных
        printf("\nПовторить (y/n)? \n\n");
        key = _getch();
    } while (key == 'y'); // Повторяем, пока нажата ‘y’
}
